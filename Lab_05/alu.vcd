$date
	Sun Jun 14 10:38:03 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module alu_tb $end
$var wire 16 ! result [15:0] $end
$var wire 1 " cero $end
$var reg 16 # a [15:0] $end
$var reg 16 $ b [15:0] $end
$var reg 4 % op [3:0] $end
$scope module g $end
$var wire 16 & a [15:0] $end
$var wire 16 ' b [15:0] $end
$var wire 4 ( op [3:0] $end
$var wire 16 ) result [15:0] $end
$var wire 16 * logicout [15:0] $end
$var wire 1 " cero $end
$var wire 16 + arithout [15:0] $end
$scope module a_block $end
$var wire 16 , a [15:0] $end
$var wire 16 - b [15:0] $end
$var wire 1 . op1 $end
$var wire 1 / op3 $end
$var wire 16 0 arithout [15:0] $end
$var wire 16 1 addout [15:0] $end
$scope module first_adder_substractor $end
$var wire 16 2 a [15:0] $end
$var wire 16 3 b [15:0] $end
$var wire 1 . s $end
$var wire 16 4 y [15:0] $end
$var wire 16 5 con [15:0] $end
$scope module first_adder $end
$var wire 16 6 a [15:0] $end
$var wire 1 . s $end
$var wire 16 7 b [15:0] $end
$var reg 16 8 y [15:0] $end
$upscope $end
$scope module first_mux $end
$var wire 16 9 a [15:0] $end
$var wire 16 : b [15:0] $end
$var wire 1 . s $end
$var wire 16 ; y [15:0] $end
$upscope $end
$upscope $end
$scope module first_stl $end
$var wire 16 < a [15:0] $end
$var wire 1 / s $end
$var wire 16 = y [15:0] $end
$var reg 16 > extend [15:0] $end
$scope module first_mux $end
$var wire 16 ? a [15:0] $end
$var wire 16 @ b [15:0] $end
$var wire 1 / s $end
$var wire 16 A y [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module answer $end
$var wire 16 B a [15:0] $end
$var wire 1 C s $end
$var wire 16 D y [15:0] $end
$var wire 16 E b [15:0] $end
$upscope $end
$scope module l_block $end
$var wire 16 F a [15:0] $end
$var wire 16 G b [15:0] $end
$var wire 4 H op [3:0] $end
$var reg 16 I logicout [15:0] $end
$upscope $end
$scope module z_block $end
$var wire 16 J a [15:0] $end
$var reg 1 " y $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1001 J
bx I
b0 H
b100 G
b101 F
bx E
b1001 D
0C
b1001 B
b1001 A
b0 @
b1001 ?
b0 >
b1001 =
b1001 <
b100 ;
b1111111111111011 :
b100 9
b1001 8
b100 7
b101 6
b100 5
b1001 4
b100 3
b101 2
b1001 1
b1001 0
0/
0.
b100 -
b101 ,
b1001 +
bx *
b1001 )
b0 (
b100 '
b101 &
b0 %
b100 $
b101 #
0"
b1001 !
$end
#1
b1 !
b1 )
b1 D
b1 J
b1 +
b1 0
b1 =
b1 A
b1 B
b1 1
b1 4
b1 8
b1 <
b1 ?
b1111111111111011 5
b1111111111111011 7
b1111111111111011 ;
1.
b10 %
b10 (
b10 H
#3
b1001 +
b1001 0
b1001 =
b1001 A
b1001 B
b1001 1
b1001 4
b1001 8
b1001 <
b1001 ?
b100 5
b100 7
b100 ;
b100 !
b100 )
b100 D
b100 J
0.
1C
b100 *
b100 E
b100 I
b100 %
b100 (
b100 H
#4
b101 !
b101 )
b101 D
b101 J
b101 *
b101 E
b101 I
b101 %
b101 (
b101 H
#5
b1 +
b1 0
b1 =
b1 A
b1 B
b1 1
b1 4
b1 8
b1 <
b1 ?
b1111111111111011 5
b1111111111111011 7
b1111111111111011 ;
b1 !
b1 )
b1 D
b1 J
1.
b1 *
b1 E
b1 I
b110 %
b110 (
b110 H
#6
b1111111111111010 !
b1111111111111010 )
b1111111111111010 D
b1111111111111010 J
b1111111111111010 *
b1111111111111010 E
b1111111111111010 I
b111 %
b111 (
b111 H
#7
1"
b0 +
b0 0
b0 =
b0 A
b0 B
b0 !
b0 )
b0 D
b0 J
1/
0C
bx *
bx E
bx I
b1010 %
b1010 (
b1010 H
#8
0"
bx !
bx )
bx D
bx J
1C
b1111 %
b1111 (
b1111 H
#10
